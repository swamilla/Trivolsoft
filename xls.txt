97.	public String getCellData(String sheetName,int colNum,int rowNum){
98.	try{
99.	if(rowNum <=0)
100.	return "";
101.	int index = workbook.getSheetIndex(sheetName);
102.	if(index==-1)
103.	return "";
104.	sheet = workbook.getSheetAt(index);
105.	row = sheet.getRow(rowNum-1);
106.	if(row==null)
107.	return "";
108.	cell = row.getCell(colNum);
109.	if(cell==null)
110.	return "";
111.	if(cell.getCellType()==Cell.CELL_TYPE_STRING)
112.	return cell.getStringCellValue();
113.	else if(cell.getCellType()==Cell.CELL_TYPE_NUMERIC || cell.getCellType()==Cell.CELL_TYPE_FORMULA ){
114.	String cellText  = String.valueOf(cell.getNumericCellValue());
115.	if (HSSFDateUtil.isCellDateFormatted(cell)) {
116.	// format in form of M/D/YY
117.	double d = cell.getNumericCellValue();
118.	Calendar cal =Calendar.getInstance();
119.	cal.setTime(HSSFDateUtil.getJavaDate(d));
120.	cellText =
121.	(String.valueOf(cal.get(Calendar.YEAR))).substring(2);
122.	cellText = cal.get(Calendar.MONTH)+1 + "/" +
123.	cal.get(Calendar.DAY_OF_MONTH) + "/" +
124.	cellText;
125.	// System.out.println(cellText);
126.	}
127.	return cellText;
128.	}else if(cell.getCellType()==Cell.CELL_TYPE_BLANK)
129.	return "";
130.	else
131.	return String.valueOf(cell.getBooleanCellValue());
132.	}
133.	catch(Exception e){
134.	e.printStackTrace();
135.	return "row "+rowNum+" or column "+colNum +" does not exist  in xls";
136.	}
137.	}
